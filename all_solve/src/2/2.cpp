#include <iostream>
#include <iomanip>
#include <cstdint>

int main() 
{
    uint8_t key[49] = {0x4E, 0x83, 0x45, 0x12, 0x5F, 0x3B, 0x22, 0xB3, 0x01, 0x9D, 0xB3, 0x0E, 0xBD, 0x34, 0xEE, 0xBC, 0x8C, 0xA0, 0x42, 0xF5, 0xDB, 0xB8, 0x42, 0x9A, 0x9F, 0x18, 0x2B, 0x9D, 0xF0, 0x32, 0x8A, 0x9F, 0xDC, 0xBD, 0x72, 0xA7, 0x5E, 0xF4, 0xD8, 0xF1, 0x86, 0x5F, 0xB7, 0xC2, 0x55, 0x41, 0x28, 0x21, 0x33};
    uint8_t text[14][49] = {0x07, 0xE5, 0x45, 0x12, 0x26, 0x54, 0x57, 0xB3, 0x01, 0xF4, 0xDE, 0x6F, 0xDA, 0x5D, 0x80, 0xD9, 0x8C, 0xA0, 0x36, 0x9D, 0xBE, 0xB8, 0x42, 0xF6, 0xF0, 0x7F, 0x42, 0xFE, 0xF0, 0x32, 0xE5, 0xF9, 0xDC, 0xBD, 0x13, 0xA7, 0x5E, 0x84, 0xBD, 0x83, 0xF5, 0x30, 0xD9, 0xE5, 0x26, 0x41, 0x28, 0x55, 0x5B,
0x21, 0xF6, 0x22, 0x7A, 0x2B, 0x48, 0x22, 0xB3, 0x72, 0xF8, 0xD6, 0x65, 0xD4, 0x5A, 0x89, 0xBC, 0x8C, 0xD4, 0x2D, 0xF5, 0xDB, 0xC8, 0x30, 0xF5, 0xEB, 0x7D, 0x48, 0xE9, 0xF0, 0x32, 0xE2, 0xF6, 0xAF, 0xBD, 0x72, 0xCA, 0x3B, 0x87, 0xAB, 0x90, 0xE1, 0x3A, 0xB7, 0xC2, 0x33, 0x33, 0x47, 0x4C, 0x33,
0x4E, 0xEC, 0x30, 0x66, 0x2C, 0x52, 0x46, 0xD6, 0x73, 0xEE, 0x9F, 0x0E, 0xBD, 0x40, 0x86, 0xD9, 0xE2, 0xA0, 0x42, 0x9C, 0xAF, 0xB8, 0x42, 0xF3, 0xEC, 0x18, 0x2B, 0xEC, 0x85, 0x5B, 0xFE, 0xFA, 0xDC, 0xBD, 0x07, 0xC9, 0x3A, 0x91, 0xAA, 0x82, 0xF2, 0x3E, 0xD9, 0xA6, 0x34, 0x23, 0x44, 0x44, 0x33,
0x4E, 0xF7, 0x2D, 0x73, 0x2B, 0x3B, 0x22, 0xC7, 0x69, 0xF8, 0xB3, 0x0E, 0xD4, 0x50, 0x8B, 0xDD, 0x8C, 0xA0, 0x36, 0x9D, 0xBA, 0xCC, 0x42, 0x9A, 0xDC, 0x61, 0x59, 0xF4, 0x9C, 0x5E, 0xE3, 0xFC, 0xDC, 0xBD, 0x1E, 0xC2, 0x2A, 0x80, 0xBD, 0x83, 0xF5, 0x5F, 0xB7, 0xA6, 0x20, 0x33, 0x41, 0x4F, 0x54,
0x4E, 0x83, 0x20, 0x7C, 0x3C, 0x49, 0x5B, 0xC3, 0x75, 0xF4, 0xDC, 0x60, 0xBD, 0x34, 0x8D, 0xDD, 0xE2, 0xA0, 0x42, 0x9B, 0xB4, 0xCC, 0x42, 0x9A, 0xF0, 0x76, 0x47, 0xE4, 0xF0, 0x32, 0xE8, 0xFA, 0xDC, 0xBD, 0x11, 0xCF, 0x3F, 0x9A, 0xBF, 0x94, 0xE2, 0x5F, 0xB7, 0xAB, 0x3B, 0x41, 0x28, 0x52, 0x5B,
0x2F, 0xF3, 0x20, 0x3E, 0x5F, 0x3B, 0x40, 0xC6, 0x75, 0x9D, 0xB3, 0x7D, 0xD4, 0x59, 0x9E, 0xD0, 0xF5, 0xA0, 0x42, 0x87, 0xBE, 0xC8, 0x2E, 0xFB, 0xFC, 0x7D, 0x4F, 0x9D, 0xF0, 0x45, 0xE3, 0xEB, 0xB4, 0xBD, 0x72, 0xD4, 0x2E, 0x91, 0xBB, 0x98, 0xE7, 0x33, 0xDB, 0xBB, 0x55, 0x41, 0x41, 0x4F, 0x45,
0x2B, 0xED, 0x31, 0x77, 0x3B, 0x3B, 0x22, 0xC0, 0x68, 0xFA, 0xDD, 0x7D, 0x93, 0x34, 0xEE, 0xFD, 0xEF, 0xC3, 0x27, 0x86, 0xA8, 0xB8, 0x42, 0xEE, 0xF0, 0x18, 0x2B, 0xF3, 0x95, 0x4A, 0xFE, 0x9F, 0xDC, 0xDC, 0x00, 0xC4, 0x36, 0x9D, 0xAE, 0x94, 0x86, 0x5F, 0xDE, 0xB1, 0x55, 0x41, 0x79, 0x6D, 0x50,
0x7C, 0xC1, 0x2D, 0x22, 0x0E, 0x4D, 0x13, 0xDA, 0x51, 0xF3, 0xE1, 0x38, 0x8F, 0x34, 0xEE, 0xE8, 0xE4, 0xC5, 0x42, 0xF5, 0xB2, 0xD5, 0x32, 0xF6, 0xFA, 0x75, 0x4E, 0xF3, 0x84, 0x53, 0xFE, 0xF6, 0xB3, 0xD3, 0x72, 0xA7, 0x31, 0x92, 0xD8, 0xF1, 0xF2, 0x37, 0xDE, 0xB1, 0x55, 0x41, 0x41, 0x45, 0x56,
0x2F, 0x83, 0x45, 0x70, 0x3A, 0x58, 0x43, 0xDE, 0x64, 0x9D, 0xB3, 0x7A, 0xD5, 0x51, 0xEE, 0xBC, 0xE2, 0xC5, 0x3A, 0x81, 0xDB, 0xB8, 0x31, 0xEE, 0xFA, 0x68, 0x2B, 0x9D, 0x99, 0x5C, 0x8A, 0x9F, 0xA8, 0xD5, 0x17, 0xA7, 0x5E, 0x90, 0xBD, 0x87, 0xE3, 0x33, 0xD8, 0xB2, 0x38, 0x24, 0x46, 0x55, 0x33,
0x4E, 0xEC, 0x23, 0x12, 0x5F, 0x4F, 0x4A, 0xD6, 0x01, 0x9D, 0xD6, 0x60, 0xDE, 0x46, 0x97, 0xCC, 0xF8, 0xC9, 0x2D, 0x9B, 0xDB, 0xB8, 0x20, 0xEF, 0xEC, 0x71, 0x45, 0xF8, 0x83, 0x41, 0x8A, 0x9F, 0xB5, 0xD3, 0x72, 0xA7, 0x0C, 0x81, 0xAB, 0x82, 0xEF, 0x3E, 0x99, 0xC2, 0x55, 0x0B, 0x5D, 0x45, 0x54,
0x27, 0xED, 0x22, 0x12, 0x5F, 0x59, 0x5B, 0xB3, 0x01, 0xE9, 0xDB, 0x6B, 0xBD, 0x34, 0x9C, 0xD9, 0xFF, 0xC5, 0x23, 0x87, 0xB8, 0xD0, 0x42, 0x9A, 0xF0, 0x7E, 0x2B, 0x9D, 0x98, 0x5B, 0xF9, 0xEB, 0xB3, 0xCF, 0x1B, 0xC6, 0x30, 0x87, 0xF4, 0xF1, 0x86, 0x2B, 0xDF, 0xAB, 0x26, 0x41, 0x28, 0x49, 0x52,
0x3E, 0xF3, 0x20, 0x7C, 0x3A, 0x5F, 0x22, 0xB3, 0x68, 0xF3, 0xB3, 0x0E, 0xC9, 0x5C, 0x8B, 0xBC, 0x8C, 0xD3, 0x27, 0x83, 0xBE, 0xD6, 0x36, 0xFF, 0xFA, 0x76, 0x5F, 0xF5, 0xF0, 0x32, 0xE9, 0xFA, 0xB2, 0xC9, 0x07, 0xD5, 0x27, 0xDA, 0xD8, 0xF1, 0xC7, 0x31, 0xD8, 0xB6, 0x3D, 0x24, 0x5A, 0x21, 0x33,
0x27, 0xEE, 0x35, 0x7D, 0x2D, 0x4F, 0x43, 0xDD, 0x75, 0x9D, 0xB3, 0x69, 0xD2, 0x55, 0x82, 0xBC, 0x8C, 0xD7, 0x23, 0x86, 0xDB, 0xB8, 0x36, 0xF5, 0x9F, 0x18, 0x4D, 0xF4, 0x9E, 0x56, 0x8A, 0x9F, 0xAB, 0xDC, 0x0B, 0xD4, 0x5E, 0xF4, 0xAC, 0x9E, 0x86, 0x5F, 0xC4, 0xB2, 0x30, 0x24, 0x4C, 0x21, 0x33,
0x3B, 0xF3, 0x45, 0x12, 0x3C, 0x49, 0x5B, 0xC3, 0x75, 0xFC, 0xDD, 0x6F, 0xD1, 0x4D, 0x9D, 0xD5, 0xFF, 0x8E, 0x32, 0x94, 0xBF, 0xDC, 0x2B, 0xF4, 0xF8, 0x68, 0x4A, 0xF9, 0x94, 0x5B, 0xE4, 0xF8, 0xAC, 0xDC, 0x16, 0xC3, 0x37, 0x9A, 0xBF, 0x81, 0xE7, 0x3B, 0xD3, 0xAB, 0x3B, 0x26, 0x58, 0x40, 0x57};
    uint8_t gamma[49] = {0x4E, 0x83, 0x45, 0x12, 0x5F, 0x3B, 0x22, 0xB3, 0x01, 0x9D, 0xB3, 0x0E, 0xBD, 0x34, 0xEE, 0xBC, 0x8C, 0xA0, 0x42, 0xF5, 0xDB, 0xB8, 0x42, 0x9A, 0x9F, 0x18, 0x2B, 0x9D, 0xF0, 0x32, 0x8A, 0x9F, 0xDC, 0xBD, 0x72, 0xA7, 0x5E, 0xF4, 0xD8, 0xF1, 0x86, 0x5F, 0xB7, 0xC2, 0x55, 0x41, 0x28, 0x21, 0x33};

    // Применяем XOR к тексту с гаммой
    for (int j = 0; j < 49; j++) {
        for (int i = 0; i < 14; i++) {
            text[i][j] ^= gamma[j];
        }
    }

    // Выводим шестнадцатеричные данные текста
    for (int i = 0; i < 14; i++) {
        std::cout << "str " << i << " ";
        for (int j = 0; j < 49; j++) {
            std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(text[i][j]) << " ";
        }
        std::cout << std::endl;
    }

    std::cout << "=====================================" << std::endl;

    // Выводим текст в читаемом виде
    std::cout << "Decoded text:" << std::endl;
    for (int i = 0; i < 14; i++) {
        std::cout << "str " << i << " ";
        for (int j = 0; j < 49; j++) {
            if (text[i][j] >= 32 && text[i][j] <= 126) {
                std::cout << static_cast<char>(text[i][j]);
            } else {
                std::cout << ".";
            }
        }
        std::cout << std::endl;
    }

    std::cout << "\nGamma: ";
    for (int k = 0; k < 49; k++) {
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(key[k]) << " ";
    }
    std::cout << std::endl;

    return 0;
}
